{"version":3,"sources":["webpack:///./src/js/polyfills/base64.js"],"names":["chars","InvalidCharacterError","message","prototype","Error","name","window","btoa","input","str","String","block","charCode","idx","map","output","charAt","charCodeAt","atob","replace","length","bc","bs","buffer","fromCharCode","indexOf"],"mappings":";;;;;;;;;;AAAA;;AAEA,kCAAO,EAAP,kCAAW,YAAW;AAClB;AACA;;AAEA,SAAIA,QAAQ,mEAAZ;;AAEA,cAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACpC,cAAKA,OAAL,GAAeA,OAAf;AACH;AACDD,2BAAsBE,SAAtB,GAAkC,IAAIC,KAAJ,EAAlC;AACAH,2BAAsBE,SAAtB,CAAgCE,IAAhC,GAAuC,uBAAvC;;AAEA;AACA;AACAC,YAAOC,IAAP,KACID,OAAOC,IAAP,GAAc,UAAUC,KAAV,EAAiB;AAC3B,aAAIC,MAAMC,OAAOF,KAAP,CAAV;AACA;AACI;AACA,aAAIG,KAAJ,EAAWC,QAAX,EAAqBC,MAAM,CAA3B,EAA8BC,MAAMd,KAApC,EAA2Ce,SAAS,EAFxD;AAGI;AACA;AACA;AACAN,aAAIO,MAAJ,CAAWH,MAAM,CAAjB,MAAwBC,MAAM,GAAN,EAAWD,MAAM,CAAzC,CANJ;AAOI;AACAE,mBAAUD,IAAIE,MAAJ,CAAW,KAAKL,SAAS,IAAIE,MAAM,CAAN,GAAU,CAAvC,CARd,EASM;AACFD,wBAAWH,IAAIQ,UAAJ,CAAeJ,OAAO,IAAI,CAA1B,CAAX;AACA,iBAAID,WAAW,IAAf,EAAqB;AACjB,uBAAM,IAAIX,qBAAJ,CAA0B,4FAA1B,CAAN;AACH;AACDU,qBAAQA,SAAS,CAAT,GAAaC,QAArB;AACH;AACD,gBAAOG,MAAP;AACH,MApBL;;AAsBA;AACA;AACAT,YAAOY,IAAP,KACIZ,OAAOY,IAAP,GAAc,UAAUV,KAAV,EAAiB;AAC3B;AACA,aAAIC,MAAMC,OAAOF,KAAP,EAAcW,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAV;AACA,aAAIV,IAAIW,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACtB,mBAAM,IAAInB,qBAAJ,CAA0B,qEAA1B,CAAN;AACH;AACD;AACA;AACI;AACA,aAAIoB,KAAK,CAAT,EAAYC,EAAZ,EAAgBC,MAAhB,EAAwBV,MAAM,CAA9B,EAAiCE,SAAS,EAF9C;AAGI;AACAQ,kBAASd,IAAIO,MAAJ,CAAWH,KAAX,CAJb;AAKI;AACA,UAACU,MAAD,KAAYD,KAAKD,KAAK,CAAL,GAASC,KAAK,EAAL,GAAUC,MAAnB,GAA4BA,MAAjC;AACR;AACA;AACAF,gBAAO,CAHX,IAGgBN,UAAUL,OAAOc,YAAP,CAAoB,MAAMF,OAAO,CAAC,CAAD,GAAKD,EAAL,GAAU,CAAjB,CAA1B,CAH1B,GAG2E,CAT/E,EAUM;AACF;AACAE,sBAASvB,MAAMyB,OAAN,CAAcF,MAAd,CAAT;AACH;AACD,gBAAOR,MAAP;AACH,MAvBL;AAwBH,EA9DD,gJ","file":"polyfills.base64.js","sourcesContent":["/* eslint no-unused-expressions: 0 */\n\ndefine([], function() {\n    // https://github.com/davidchambers/Base64.js\n    // v0.3.0\n\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n    function InvalidCharacterError(message) {\n        this.message = message;\n    }\n    InvalidCharacterError.prototype = new Error();\n    InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n    // encoder\n    // [https://gist.github.com/999166] by [https://github.com/nignag]\n    window.btoa || (\n        window.btoa = function (input) {\n            var str = String(input);\n            for (\n                // initialize result and counter\n                var block, charCode, idx = 0, map = chars, output = '';\n                // if the next str index does not exist:\n                //   change the mapping table to \"=\"\n                //   check if d has no fractional digits\n                str.charAt(idx | 0) || (map = '=', idx % 1);\n                // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n                output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n                ) {\n                charCode = str.charCodeAt(idx += 3 / 4);\n                if (charCode > 0xFF) {\n                    throw new InvalidCharacterError('\\'btoa\\' failed: The string to be encoded contains characters outside of the Latin1 range.');\n                }\n                block = block << 8 | charCode;\n            }\n            return output;\n        });\n\n    // decoder\n    // [https://gist.github.com/1020396] by [https://github.com/atk]\n    window.atob || (\n        window.atob = function (input) {\n            /* eslint no-div-regex: 0 */\n            var str = String(input).replace(/=+$/, '');\n            if (str.length % 4 === 1) {\n                throw new InvalidCharacterError('\\'atob\\' failed: The string to be decoded is not correctly encoded.');\n            }\n            /* eslint no-cond-assign: 0 */\n            for (\n                // initialize result and counters\n                var bc = 0, bs, buffer, idx = 0, output = '';\n                // get next character\n                buffer = str.charAt(idx++);\n                // character found in table? initialize bit storage and add its ascii value;\n                ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n                    // and if not first of each 4 characters,\n                    // convert the first 8 bits to one ascii character\n                    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n                ) {\n                // try to find character in table (0-63, not found => -1)\n                buffer = chars.indexOf(buffer);\n            }\n            return output;\n        });\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js/polyfills/base64.js\n **/"],"sourceRoot":""}